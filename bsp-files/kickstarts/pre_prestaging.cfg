%pre --erroronfail

# Source common functions
. /tmp/ks-functions.sh

KS="Prestaging pre :"

error=false

wlog "${KS} cmdLine: $(cat /proc/cmdline)"

if [ -d /mnt/install/source ]; then
    SOURCE_DIR=/mnt/install/source
else
    SOURCE_DIR=/run/install/repo
fi
wlog "${KS} install source : $SOURCE_DIR"

SW_VERSION=xxxPLATFORM_RELEASExxx
STAGING_DIR="platform-backup"
PRESTAGING_PART_LABEL=Platform\\x20Backup
PRESTAGING_DEVICE=/dev/disk/by-partlabel/${PRESTAGING_PART_LABEL}
PRESTAGING_REPO_DIR="${SOURCE_DIR}/opt/${STAGING_DIR}"
PRESTAGING_LOCAL_DIR="/mnt/${STAGING_DIR}"

wlog "${KS} SW_VERSION           : ${SW_VERSION}"
wlog "${KS} IMAGE_MOUNT          : ${SOURCE_DIR}"
wlog "${KS} PRESTAGING_REPO_DIR  : ${PRESTAGING_REPO_DIR}"
wlog "${KS} PRESTAGING_LOCAL_DIR : ${PRESTAGING_LOCAL_DIR}"

# check for required directories
if [ ! -d ${SOURCE_DIR} ] ; then
    msg="install source '${SOURCE_DIR}' does not exists or is not a directory"
    wlog "${KS} Prestaging Failed: ${msg}"
    report_pre_failure_with_msg "${msg}"
elif [ ! -d "${PRESTAGING_REPO_DIR}" ] ; then
    msg="repo ${PRESTAGING_REPO_DIR} does not exist"
    wlog "${KS} Prestaging Failed: ${msg}"
    report_pre_failure_with_msg "${msg}"
elif [ ! -d "${PRESTAGING_REPO_DIR}/${SW_VERSION}" ] ; then
    msg="repo ${PRESTAGING_REPO_DIR}/${SW_VERSION} sw version content missing"
    wlog "${KS} Prestaging Failed: ${msg}"
    report_prestaging_failure_with_msg "${msg}"
elif [ ! -d "${PRESTAGING_LOCAL_DIR}" ] ; then
    wlog "${KS} mounting ${PRESTAGING_LOCAL_DIR}"
    mkdir -p ${PRESTAGING_LOCAL_DIR}
    mount ${PRESTAGING_DEVICE} ${PRESTAGING_LOCAL_DIR} 2>/dev/null
    rc=$?
    if [ $rc -eq 0 ] ; then
        sleep 2
        if [ ! -d "${PRESTAGING_LOCAL_DIR}" ] ; then
            wlog "${KS} mount of staging '${PRESTAGING_LOCAL_DIR}' does not exist"
            error=true
        else
            error=false
        fi
    else
        wlog "${KS} mount of '${PRESTAGING_DEVICE}' to '${PRESTAGING_LOCAL_DIR}' failed rc:${rc}"
        error=true
    fi
fi

if [ "$error" = true ] ; then
    msg="Unable to mount ${PRESTAGING_LOCAL_DIR}"
    wlog "${KS} Prestaging failed: ${msg}"
    report_prestaging_failure_with_msg "${msg}"
fi

# create prestaging sw version dir if it does not already exist
if [ ! -d ${PRESTAGING_LOCAL_DIR}/${SW_VERSION} ] ; then
    mkdir ${PRESTAGING_LOCAL_DIR}/${SW_VERSION}
fi

# log the list of prestaged files
check=$(md5sum ${PRESTAGING_LOCAL_DIR}/${SW_VERSION}/*)
wlog "${KS} ${PRESTAGING_LOCAL_DIR} files md5sums:"
wlog "$check"

# copy prestaging files to the local mount
wlog "${KS} copy prestaging files"
cp -a ${PRESTAGING_REPO_DIR}/${SW_VERSION} ${PRESTAGING_LOCAL_DIR}
wlog "${KS} prestaging files copy done"


# loop over all the prestaged files
# - log files found
# - do md5 check on md5 files found
cd ${PRESTAGING_LOCAL_DIR}/${SW_VERSION}
for file in * ; do
    filename="${file%.*}"
    extension="${file##*.}"
    wlog "${KS} prestaged file : ${file}"
    if [ "${extension}" = "md5" ] ; then
        md5sum -c "${file}"
        if [ $? -eq 0 ] ; then
            wlog "${KS} ${filename} check passed"
        else
            wlog "${KS} ${filename} check failed"
            error=true
        fi
    fi
done

# handle any md5 check errors or log success/complete result
if [ "$error" = true ] ; then
    msg="prestaging file(s) failed integrity check ; see logs for details"
    wlog "${KS} Prestaging failed: ${msg}"
    report_prestaging_failure_with_msg "${msg}"
else
    wlog "${KS} prestaging integrity checks passed"
fi
    wlog "${KS} prestaging complete"

%end
